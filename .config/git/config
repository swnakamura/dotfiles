[core]
    editor = nvim
    pager = delta
    filemode = false
[interactive]
    diffFilter = delta --color-only
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
    side-by-side = true
[merge]
    conflictstyle = diff3
[diff]
    colorMoved = default
[user]
    name = swnakamura
    email = piequalsabout314159@gmail.com
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[rebase]
    autosquash = true
[push]
    default = current
[pull]
    ff = only
[cola]
	spellcheck = false
[init]
	defaultBranch = master

# tig configuration
[tig "color"]
    cursor = 7 8
[safe]
	directory = /home/snakamura/remote/home/yubisashi_object_detection
	directory = /home/snakamura/remote/home/pointing-dataset

[alias]
    l = log --graph  --abbrev-commit --all
    lo = log --graph  --abbrev-commit --all --oneline
    ld = log --graph  --abbrev-commit --all --date-order
    cm = commit

    ;; Commands below uses fzf for completion when arguments are not available.

    ; co: check out branch
    ; cot: check out remote branch and create a corresponding local branch
    ; coh: check out specified commit (results in 'detached HEAD' state)
    co = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git checkout $(echo $branch | sed 's#remotes/##'); else git checkout $args; fi }; f"
    cot = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --remote | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git checkout -t $(echo $branch | sed 's#remotes/##'); else git checkout -t $args; fi }; f"
    coh = "!f() { args=$@; if [ -z \"$args\" ]; then hash=$(git log --oneline | fzf --preview 'echo {} | cut -d\" \"  -f1 | xargs git show --color=always'); git checkout ${hash%% *}; else git checkout $args; fi }; f"

    ; sw: switch to a branch
    ; swc: create a branch and switch to it
    ; swC: Forcefully create and switch to a branch (switch -C)
    sw = "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git switch $(echo $branch | sed 's#remotes/##'); else git switch $args; fi }; f"
    swc= "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git switch -c $(echo $branch | sed 's#remotes/##'); else git switch -c $args; fi }; f"
    swC= "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git switch -C $(echo $branch | sed 's#remotes/##'); else git switch -C $args; fi }; f"

    ; branch -d/-D
    brd= "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git branch -d $(echo $branch | sed 's#remotes/##'); else git branch -d $args; fi }; f"
    brD= "!f() { args=$@; if [ -z \"$args\" ]; then branch=$(git branch --all | grep -v HEAD | fzf --preview 'echo {} | cut -c 3- | xargs git log --color=always' | cut -c 3-); git branch -D $(echo $branch | sed 's#remotes/##'); else git branch -D $args; fi }; f"

    d = "!f() { args=$@; [ -z \"$args\" ] && args=HEAD; ([ \"$args\" = \"HEAD\" ] && git status --short || git diff --name-status $args | sed 's/\t/  /') | fzf --preview \"echo {} | cut -c 4- | xargs git diff --color=always $args --\" --multi --height 90% | cut -c 4-; }; f"
    da = !git d | xargs -IXXX git add XXX
    dr = !git d | xargs -IXXX git reset XXX
    stl = !git stash list | fzf --preview 'echo {} | grep -o "stash@{.*}" | xargs git stash show -p --color=always' --height 90% | grep -o "stash@{.*}"
    sta = !git stl | xargs -IXXX git stash apply XXX
    std = !git stl | xargs -IXXX git stash drop XXX
    stp = !git stl | xargs -IXXX git stash pop XXX
    br = branch
    cl = clone
    fu = commit --fixup=HEAD
    fix = commit --fixup=HEAD
    st = status
    unstage = reset HEAD
    stage = add

